name: Tests

on:
  push:
    branches:
      - main
      - stable

jobs:

  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_YAML: false
          VALIDATE_DOCKERFILE_HADOLINT: false
          VALIDATE_SNAKEMAKE_LINT: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  BuildAndTest:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: ["ubuntu"]
        python-version: ['3.7', '3.8', '3.9']
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: 'Deploying miniconda'
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          environment-file: conda.recipes/conda_build_env.yaml
          activate-environment: build
          python-version: ${{ matrix.python-version }}
      - name: 'Build pip package'
        run: |
          pip install build
          python3 -m build .
      - name: 'Install pip package'
        run: |
          pip install ./dist/*whl
      - name: 'Show if it runs properly'
        run: |
          hmnfusion version
      - name: 'Run pytest'
        run: |
          pip install pytest
          python -m pytest

  Coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']
    outputs:
      percent: ${{ steps.coverage.outputs.percent }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: 'Set up Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: 'Install Soft'
        run: |
          pip install .
      - name: 'Install Deps'
        run: |
          pip install pytest-cov
      - name: 'Run coverage'
        id: coverage
        run: |
          coverage run -m pytest
          coverage json
          percent=$(python -c 'import json; data=json.load(open("coverage.json")); print(data["totals"]["percent_covered_display"])')
          echo "::set-output name=percent::${percent}"

  Badge:
    needs: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: 'Badge version'
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST }}
          gistID: 5b62753442bc7c44ae2995299575af0a
          filename: coverage.json
          label: CodeCoverage
          message: "${{ needs.Coverage.outputs.percent }}%"
          color: green
